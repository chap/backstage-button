name: Update Backstage
on:
  schedule:
  # daily 4:05am
  - cron: '5 4 * * *'
permissions:
  contents: write
  pull-requests: write
jobs:
  overwrite:
    runs-on: pub-hk-ubuntu-24.04-ip
    steps:
      # checkout repo
      - uses: actions/checkout@v4
      
      # delete everything except git and heroku files
      - name: Clean
        run: >
          mv backstage.json backstage.old.json

          find . -mindepth 1 -maxdepth 1 
          ! -name '.git' 
          ! -name '.github' 
          ! -name 'app.json' 
          ! -name 'Procfile'
          ! -name 'backstage.old.json'
          ! -name 'heroku.png'
          ! -name 'CODEOWNERS'
          ! -name 'CODE_OF_CONDUCT.md'
          ! -name 'CONTRIBUTING.md'
          ! -name 'LICENSE.txt'
          | xargs rm -rf
      
      # create new backstage app using cli
      - name: Create new app
        run: |
          export BACKSTAGE_APP_NAME=backstage
          npx @backstage/create-app --skip-install

          # copy new backstage app files to root
          # copy . files too
          shopt -s dotglob
          cp -r backstage/* ./
          rm -r backstage

      # heroku customizations
      - name: Apply heroku tweaks
        run: |
          sudo snap install yq
          
          # add build command and cache config to package.json
          jq '.scripts.build = "yarn build:backend --config ../../app-config.yaml --config ../../app-config.production.yaml"' package.json > tmp.json && mv tmp.json package.json
          jq '.cacheDirectories = ["node_modules", "packages/app/node_modules", "packages/backend/node_modules"]' package.json > tmp.json && mv tmp.json package.json

          # add heroku postgres and baseUrl config var to app-config.production.yaml
          yq eval '.app.baseUrl = "${BASE_URL}"' -i app-config.production.yaml
          yq eval '.backend.baseUrl = "${BASE_URL}"' -i app-config.production.yaml
          yq eval '.backend.listen = {"port": {"$env": "PORT"}}' -i app-config.production.yaml
          yq eval '.backend.database = {"client": "pg", "pluginDivisionMode": "schema", "ensureExists": false, "ensureSchemaExists": true, "connection": "${DATABASE_URL}" }' -i app-config.production.yaml

          # getting started in README.md
          cat << EOF > README.md
          <img src="https://backstage.io/logo_assets/svg/Icon_Gradient.svg" alt="backstage" width="100"/> &nbsp; &nbsp; &nbsp;  &nbsp; &nbsp; &nbsp; <img src="https://github.com/heroku/backstage-button/blob/main/heroku.png" alt="backstage" width="100"/>

          # [Backstage](https://backstage.io) on [Heroku](https://heroku.com)

          Use this button to bootstrap a fresh Backstage app on Heroku from [backstage/create-app@latest](https://www.npmjs.com/package/@backstage/create-app):

          [![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://dashboard.heroku.com/new?template=https://github.com/heroku/backstage-button)

          After the app is created, the \`BASE_URL\` needs to be configured:

          \`\`\`sh
          \$ heroku domains -a <your-app>
          <your-app-123>.herokuapp.com

          \$ heroku config:set BASE_URL=https://<your-app-123>.herokuapp.com -a <your-app>
          \`\`\`

          To make changes, clone this repo and push to your Heroku app:

          \`\`\`sh
          \$ git clone https://github.com/heroku/backstage-button.git <your-app>/
          \$ cd <your-app>/
          \$ heroku remote:add -a <your-app>
          \$ git push heroku main
          \`\`\`

          You should also push to a canonical git repo:
          \`\`\`sh
          \$ git remote set-url origin https://github.com/<your-app>.git
          \$ git push origin main
          \`\`\`

          The included GitHub action runs once a day and creates a PR from the latest Backstage release.
          EOF

      - name: commit
        run: |
          version=$(cat backstage.json | jq -r '.version')
          echo "BACKSTAGE_VERSION=$version" >> $GITHUB_ENV

          # don't commit if not a new version
          if cmp -s "backstage.json" "backstage.old.json"; then
            echo "Version unchanged: $version"

          else
            yarn install
            rm backstage.old.json

            git config --global user.name 'Github Action'
            git config --global user.email 'no-reply@github.com'
            git checkout -b update-$version
            git add .
            git commit -am "update backstage app version: $version"
            git push origin update-$version
          fi

      - name: create pull request
        run: gh pr create -B main -H update-${{ env.BACKSTAGE_VERSION }} --title 'Upgrade Backstage update-${{ env.BACKSTAGE_VERSION }}' --body 'Created by Github action'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
