name: Overwrite Backstage Latest
on: push
# on:
#   schedule:
#   - cron: '5 4 * * *'
permissions:
  contents: write
jobs:
  updateBackstage:
    runs-on: ubuntu-latest
    steps:
      # dont overwrite repo on forks and clones
      - name: Fail
        if: ${{ env.OVERWRITE_WITH_BACKSTAGE_LATEST != 'true' }}
        run: |
          echo "Warning: This action will overwrite the repo with the latest Backstage version.
          You probably don't want this and should delete this file: .github/workflows/overwrite-backstage-latest.yaml"
          exit 1

      # checkout repo
      - uses: actions/checkout@v3
      
      # delete everything except .git/ and .github/ folders
      - name: Clean
        run: >
          mv backstage.json backstage.old.json


          find . -mindepth 1 -maxdepth 1 
          ! -name '.git' 
          ! -name '.github' 
          ! -name '.heroku' 
          ! -name 'app.json' 
          ! -name '.gitignore' 
          ! -name 'Procfile'
          ! -name 'backstage.old.json'
          | xargs rm -rf
      
      # create new backstage app
      - name: Create new app
        run: |
          export BACKSTAGE_APP_NAME=backstage
          npx @backstage/create-app

          # move backstage app to root
          # copy . files too
          shopt -s dotglob
          cp -r backstage/* ./
          rm -r backstage

      
      # heroku customizations
      - name: Apply heroku changes
        run: |
          sudo snap install yq
          
          # package.json changes
          jq '.scripts.build = "yarn build:backend --config ../../app-config.yaml --config ../../app-config.production.yaml"' package.json > tmp.json && mv tmp.json package.json
          jq '.cacheDirectories = ["node_modules", "packages/app/node_modules", "packages/backend/node_modules"]' package.json > tmp.json && mv tmp.json package.json

          # app-config.production.yaml changes
          yq eval '.app.baseUrl = "${BASE_URL}"' -i app-config.production.yaml
          yq eval '.backend.baseUrl = "${BASE_URL}"' -i app-config.production.yaml
          yq eval '.backend.listen = {"port": {"$env": "PORT"}}' -i app-config.production.yaml
          yq eval '.backend.database = {"client": "pg", "pluginDivisionMode": "schema", "ensureExists": false, "ensureSchemaExists": true, "connection": "${DATABASE_URL}"}' -i app-config.production.yaml

          # README.md changes
          cat << EOF > README.md
          # [Backstage](https://backstage.io) on [Heroku](https://heroku.com)

          Use this button to create a new Backstage app on Heroku:

          [![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy?template=https://github.com/chap/backstage-button)

          After the app is created, the \`BASE_URL\` needs to be configured:

          \`\`\`sh
          \$ heroku domains -a <your-app>
          <your-app-123>.herokuapp.com

          \$ heroku config:set BASE_URL=https://<your-app-123>.herokuapp.com -a <your-app>
          \`\`\`

          To make changes, clone this repo and push to your Heroku app:

          \`\`\`sh
          \$ git clone https://github.com/chap/backstage-button.git <your-app>/
          \$ cd <your-app>/
          \$ heroku remote:add -a <your-app>
          \$ git push heroku main
          \`\`\`

          You should also push to a canonical git repo:
          \`\`\`sh
          \$ git remote set-url origin https://github.com/<your-app>.git
          \$ git push origin main
          \`\`\`

          The included GitHub action runs once a day and overwrites the file from the latest Backstage release. You probably don\'t want that:
          \`\`\`sh
          \$ rm .github/workflows/overwrite-backstage-latest.yaml
          \`\`\`
          EOF

      - name: Commit
        run: |
          version=$(cat "$backstage.json" | jq -r '.version')
          if cmp -s "backstage.json" "backstage.old.json"; then
            echo "Version unchanged: $version"
          else
            git config --global user.name 'Chap Ambrose'
            git config --global user.email 'cambrose@salesforce.com'
            git add .
            git commit -am "update backstage app version: $version"
            git push
          fi
